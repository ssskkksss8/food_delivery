import streamlit as st
import requests
from datetime import datetime
import pandas as pd

API_URL = "http://127.0.0.1:8001"
def display_menu():
    st.title("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã üçïüçîü•ó")
    search_menu()
    try:
        response = requests.get(f"{API_URL}/menu")
        if response.status_code == 200:
            menu_items = response.json()
            movie = ["margarita.jpg", "burger.jpg", "carbonara.jpg", "caesar.jpg"]
            k = 0
            if menu_items:
                for item in menu_items:
                    # col1, col2 = st.columns([1, 2])
                    # with col1:
                    #     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    #     st.image(f"static/images/{movie[k]}", use_container_width=True)
                    #     k = k + 1
                    
                    # with col2:
                    st.subheader(item["name"])
                    st.write(item["description"])
                    st.write(f"**–¶–µ–Ω–∞**: {item['price']} ‚ÇΩ")

                    quantity = st.number_input(
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {item['name']}",
                        min_value=1,
                        max_value=10,
                        value=1,
                        key=f"quantity_{item['name']}"
                    )

                    if st.button(f"–î–æ–±–∞–≤–∏—Ç—å {item['name']} –≤ –∫–æ—Ä–∑–∏–Ω—É", key=f"add_{item['name']}"):
                        add_to_cart(item["name"], quantity)
                    
                    st.write("–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:")
                    
                    col_pos, col_neg = st.columns(2)

                    with col_pos:
                        if st.button(f"üëç –û—Ç–ª–∏—á–Ω–æ", key=f"positive_review_{item['name']}"):
                            send_review(
                                username=st.session_state.get("username"),
                                item_name=item["name"],
                                rating=5,
                                review="–û—Ç–ª–∏—á–Ω–æ!"
                            )
                            st.success("–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

                    with col_neg:
                        if st.button(f"üëé –ü–ª–æ—Ö–æ", key=f"negative_review_{item['name']}"):
                            send_review(
                                username=st.session_state.get("username"),
                                item_name=item["name"],
                                rating=1,
                                review="–ü–ª–æ—Ö–æ!"
                            )
                            st.success("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                st.info("–ú–µ–Ω—é –ø—É—Å—Ç–æ.")
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {response.status_code}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")

def update_address():
    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å")
    username = st.session_state["username"]
    address = st.text_input("–ê–¥—Ä–µ—Å", "")
    if address:
        city = st.text_input("–ì–æ—Ä–æ–¥", "")
        if city:
            postal_code = st.text_input("–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å", "")
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å"):
                if address and city and postal_code:
                    payload = {
                        "username": username,
                        "address": address,
                        "city": city,
                        "postal_code": postal_code
                    }
                    try:
                        response = requests.post(f"{API_URL}/address/save", json=payload)
                        if response.status_code == 200:
                            st.success("–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
                        else:
                            st.error(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
                else:
                    st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")

def search_menu():
    st.title("–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –º–µ–Ω—é")
    
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞")
    if st.button("–ü–æ–∏—Å–∫"):
        try:
            response = requests.get(f"{API_URL}/menu/search", params={"query": query})
            if response.status_code == 200:
                results = response.json()
                if results:
                    for product in results:
                        st.write(f"**{product['name']}** - {product['price']} —Ä—É–±.")
                        st.write(f"_–û–ø–∏—Å–∞–Ω–∏–µ_: {product['description']}")
                        st.write(f"_–î–æ—Å—Ç—É–ø–Ω–æ_: {'–î–∞' if product['available'] else '–ù–µ—Ç'}")
                        st.write("---")
                else:
                    st.info("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                st.error(f"–û—à–∏–±–∫–∞: {response.status_code}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")

def send_review(username, item_name, rating, review):
    payload = {
        "username": username,
        "item_name": item_name,
        "rating": rating,
        "review": review,
    }
    try:
        response = requests.post(f"{API_URL}/reviews/add", json=payload)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {str(e)}")

def add_to_cart(item_name, quantity):
    if "username" not in st.session_state:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        return

    payload = {
        "username": st.session_state["username"],
        "item_name": item_name,
        "quantity": quantity
    }

    response = requests.post(f"{API_URL}/cart/add", json=payload)
    if response.status_code == 200:
        st.success(f"{item_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        username = st.session_state["username"]
        updated_response = requests.get(f"{API_URL}/cart/{username}")
        if updated_response.status_code == 200:
            st.session_state["cart_items"] = updated_response.json()
        else:
            st.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã.")
    else:
        error_detail = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        if "duplicate key value" in error_detail:
            st.warning(f"{item_name} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ. –í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        else:
            st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {error_detail}")

def remove_from_cart(username, item_name):
    try:
        response = requests.delete(f"{API_URL}/cart/remove", params={"username": username, "item_name": item_name})
        if response.status_code == 200:
            st.success(f"{item_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
        else:
            st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item_name} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

def display_cart():
    st.title("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞")

    if "username" not in st.session_state:
        st.error("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    username = st.session_state["username"]

    try:
        response = requests.get(f"{API_URL}/cart/{username}")
        if response.status_code == 200:
            cart_items = response.json()
            st.session_state["cart_items"] = cart_items
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {response.status_code}")
            return

        cart_items = st.session_state.get("cart_items", [])
        if cart_items:
            total_price = 0
            for index, item in enumerate(cart_items):
                st.subheader(item["item_name"])
                st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}")
                st.write(f"–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item['price']} ‚ÇΩ")
                st.write(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {item['created_at']}")

                if st.button(f"–£–¥–∞–ª–∏—Ç—å {item['item_name']}", key=f"remove_{item['item_name']}_{index}"):
                    remove_from_cart(username, item["item_name"])

                    updated_response = requests.get(f"{API_URL}/cart/{username}")
                    if updated_response.status_code == 200:
                        st.session_state["cart_items"] = updated_response.json()
                    else:
                        st.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")
                    st.rerun()

                total_price += item["price"] * item["quantity"]

            st.subheader(f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price:.2f} ‚ÇΩ")

        else:
            st.info("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {str(e)}")


def register():
    st.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    username = st.text_input("–õ–æ–≥–∏–Ω")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    role = st.selectbox("–†–æ–ª—å", ["user", "admin"])
    
    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        if not username or not password:
            st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –≤–≤–æ–¥–∞")
            return
        
        payload = {"username": username, "password": password, "role": role}
        response = requests.post(f"{API_URL}/register", json=payload)
        if response.status_code == 200:
            st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
        else:
            st.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}")
def login():
    st.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    username = st.text_input("–õ–æ–≥–∏–Ω")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        response = requests.post(f"{API_URL}/login", json={"username": username, "password": password})
        if response.status_code == 200:
            st.success("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            data = response.json()
            st.session_state["token"] = data["access_token"]
            st.session_state["username"] = username
            st.session_state["user_role"] = str(data["role"]) 
        else:
            st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        st.rerun()

def format_date(date_string):
    try:
        created_at = datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%S.%f')
        return created_at.strftime('%d.%m.%Y %H:%M:%S')
    except ValueError:
        return date_string 
        
def display_payments(payments):
    payments_data = []
    for payment in payments:
        payments_data.append({
            "ID –∑–∞–∫–∞–∑–∞": payment['order_id'],
            "–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã": payment['payment_method'],
            "–°—É–º–º–∞": payment['amount'],
            "–°—Ç–∞—Ç—É—Å": payment['status'],
            "–î–∞—Ç–∞": format_date(payment['created_at'])
        })
    df_payments = pd.DataFrame(payments_data)
    df_payments.index = df_payments.index + 1
    st.dataframe(df_payments)

def display_reviews(reviews):
    reviews_data = []
    for review in reviews:
        reviews_data.append({
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": review['user_id'],
            "–¢–æ–≤–∞—Ä": review['menu_id'],
            "–†–µ–π—Ç–∏–Ω–≥": review['rating'],
            "–û—Ç–∑—ã–≤": review['review'],
            "–î–∞—Ç–∞": format_date(review['created_at'])
        })
    df_reviews = pd.DataFrame(reviews_data)
    df_reviews.index = df_reviews.index + 1
    st.dataframe(df_reviews)

def display_addresses(addresses):
    addresses_data = []
    for address in addresses:
        addresses_data.append({
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": address['user_id'],
            "–ê–¥—Ä–µ—Å": address['address'],
            "–ì–æ—Ä–æ–¥": address['city'],
            "–ò–Ω–¥–µ–∫—Å": address['postal_code'],
            "–î–∞—Ç–∞": format_date(address['created_at'])
        })
    df_addresses = pd.DataFrame(addresses_data)
    df_addresses.index = df_addresses.index + 1
    st.dataframe(df_addresses)

import requests

def display_admin_page():
    st.title("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    headers = {"Authorization": f"Bearer {st.session_state['token']}"}

    st.header("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤")
    try:
        response = requests.get(f"{API_URL}/admin/reviews", headers=headers)
        if response.status_code == 200:
            reviews = response.json()
            display_reviews(reviews)
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")

    st.header("–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏")
    try:
        response = requests.get(f"{API_URL}/admin/addresses", headers=headers)
        if response.status_code == 200:
            addresses = response.json()
            display_addresses(addresses)
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤: {str(e)}")

    st.header("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞—Ç–µ–∂–µ–π")
    try:
        response = requests.get(f"{API_URL}/admin/payments", headers=headers)
        if response.status_code == 200:
            payments = response.json()
            display_payments(payments)
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}")
    
    st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏")
    
    if st.button("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"):
        try:
            response = requests.post(f"{API_URL}/admin/backup", headers=headers)
            if response.status_code == 200:
                st.success("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é",
                    data=response.content,
                    file_name="db_backup.sql",
                    mime="application/sql"
                )
            else:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", type=["sql"])
    if uploaded_file is not None and st.button("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"):
        try:
            files = {"file": uploaded_file}
            response = requests.post(f"{API_URL}/admin/restore", files=files, headers=headers)
            if response.status_code == 200:
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")
            else:
                st.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")


def checkout_cart(username):
    try:
        response = requests.post(f"{API_URL}/checkout/{username}")
        if response.status_code == 200:
            result = response.json()
            st.success(result["message"])
        else:
            error_message = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            st.error(f"–û—à–∏–±–∫–∞: {error_message}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
def load_cart(username):
    try:
        response = requests.get(f"{API_URL}/cart/{username}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return []

def order_page():
    st.title("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    username = st.session_state["username"]

    if username:
        cart = load_cart(username)
        if cart:
            print(cart)
            st.write("–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:")
            for item in cart:
                st.write(f"{item['item_name']} - {item['quantity']} —à—Ç. - {item['price']} —Ä—É–±.")

            if st.button("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"): 
                checkout_cart(username)

def pay_order(order_id, payment_method, amount):
    try:
        payload = {
            "payment_method": payment_method,
            "amount": amount
        }
        response = requests.post(f"{API_URL}/pay_order/{order_id}", json=payload)
        if response.status_code == 200:
            result = response.json()
            st.success(result["message"])
        else:
            error_message = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            st.error(f"–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: {error_message}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ: {str(e)}")
        


def load_orders(username):
    try:
        response = requests.get(f"{API_URL}/orders/{username}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")
            return {}
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return {}

def payment_page():
    username = st.session_state['username']
    order = load_orders(username)

    if not order or "message" in order:
        st.write("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return

    st.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    st.write(f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order['total_price']} —Ä—É–±.")
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {order['order_count']}")
    st.write(f"–°—Ç–∞—Ç—É—Å: {order['status']}")

    if order["status"] == "pending":
        payment_method = st.selectbox(
            "–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã",
            ["credit_card", "paypal", "cash"]
        )
        amount = st.number_input(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã",
            min_value=0.0,
            step=0.01,
            format="%.2f"
        )
        if st.button("–û–ø–ª–∞—Ç–∏—Ç—å"):
            pay_order(order["user_id"], payment_method, amount)
            


if "token" not in st.session_state:
    page = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    if page == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        login()
    elif page == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        register()
else:
    user_role = st.session_state.get("user_role")
    if user_role == "admin":
        page = st.sidebar.radio("–°—Ç—Ä–∞–Ω–∏—Ü—ã", ["–ú–µ–Ω—é", "–ö–æ—Ä–∑–∏–Ω–∞", "–ê–¥—Ä–µ—Å", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞—è"])
    else:
        page = st.sidebar.radio("–°—Ç—Ä–∞–Ω–∏—Ü—ã", ["–ú–µ–Ω—é", "–ö–æ—Ä–∑–∏–Ω–∞", "–ê–¥—Ä–µ—Å", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"])

    if page == "–ú–µ–Ω—é":
        display_menu()
    elif page == "–ö–æ—Ä–∑–∏–Ω–∞":
        display_cart()
    elif page == "–ê–¥—Ä–µ—Å":
        update_address()
    elif page == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        order_page()
    elif page == "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞":
        payment_page()
    elif page == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞—è":
        if user_role == "admin":
            display_admin_page()
        else:
            st.error("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
